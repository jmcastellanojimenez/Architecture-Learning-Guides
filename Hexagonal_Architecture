💡 GOLDEN RULE:
   "Business logic should not depend on infrastructure.
    Infrastructure should depend on business logic."

🎯 KEEP IT SIMPLE:
   Start with the domain, add application layer, 
   then build infrastructure around it.

╔══════════════════════════════════════════════════════════════════╗
║                    🔷 HEXAGONAL ARCHITECTURE                     ║
║                        (Ports & Adapters)                        ║
╚══════════════════════════════════════════════════════════════════╝

📋 ARCHITECTURE LAYERS
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   🔧 INFRA      │───▶│   ⚙️ APPLICATION │───▶│   💎 DOMAIN     │
│   STRUCTURE     │    │                 │    │                 │
├─────────────────┤    ├─────────────────┤    ├─────────────────┤
│ • Database      │    │ • Use Cases     │    │ • Entities      │
│ • External APIs │    │ • App Services  │    │ • Value Objects │
│ • Message Queue │    │ • Command/Query │    │ • Domain Srvcs  │
│ • File Systems  │    │ • Event Handler │    │ • Repositories  │
│ • Web Framework │    │ • Orchestration │    │ • Domain Events │
└─────────────────┘    └─────────────────┘    └─────────────────┘
        ▲                       ▲                       ▲
        │                       │                       │
    Changes due             Coordinates           Pure Business
    to external              workflows            Logic
    decisions                                           

## 🔌 PORTS & ADAPTERS PATTERN
╔════════════════════════════════════════════════════════════════╗
║                        APPLICATION CORE                        ║
║  ┌─────────────────────────────────────────────────────────┐   ║
║  │                   💎 DOMAIN LAYER                       │   ║
║  │                                                         │   ║
║  │  🔌 PORTS (Interfaces)         🏛️ BUSINESS LOGIC         │   ║
║  │  • UserRepository              • User Entity            │   ║
║  │  • PaymentGateway              • Email Value Object     │   ║
║  │  • EmailService                • Order Aggregate        │   ║
║  │  • EventPublisher              • Domain Services        │   ║
║  └─────────────────────────────────────────────────────────┘   ║
╚════════════════════════════════════════════════════════════════╝
               ▲                    ▲                    ▲
               │                    │                    │
    ┌──────────┴──────────┐  ┌──────┴──────┐  ┌──────────┴──────────┐
    │   🔧 ADAPTERS       │  │ 🔧 ADAPTERS  │  │   🔧 ADAPTERS       │
    │                     │  │             │  │                     │
    │ • MySqlUserRepo     │  │ • RESTful   │  │ • RabbitMQPublisher │
    │ • PostgresUserRepo  │  │   API       │  │ • KafkaPublisher    │
    │ • InMemoryUserRepo  │  │ • GraphQL   │  │ • RedisPublisher    │
    └─────────────────────┘  └─────────────┘  └─────────────────────┘

🔄 REQUEST FLOW

🌐 HTTP Request
    │
    ▼
┌───────────────┐    ┌─────────────────┐    ┌──────────────┐
│ 📡 CONTROLLER │───▶│ ⚙️ APPLICATION   │───▶│ 💎 DOMAIN    │
│               │    │    SERVICE      │    │   ENTITY     │
│ • Validates   │    │                 │    │              │
│ • Maps DTOs   │    │ • Orchestrates  │    │ • Business   │
│ • Handles     │    │ • Coordinates   │    │   Rules      │
│   Errors      │    │ • Transactions  │    │ • Validates  │
└───────────────┘    └─────────────────┘    └──────────────┘
    ▲                         │                      │
    │                         ▼                      ▼
    │                ┌─────────────────┐    ┌──────────────┐
    │                │ 📡 EVENT        │    │ 🗄️ REPOSITORY │
    │                │   PUBLISHER     │    │   PORT       │
    │                │                 │    │              │
    └────────────────│ • Domain Events │    │ • Data Access│
    📤 HTTP Response │ • Notifications │    │ • Persistence│
                     └─────────────────┘    └──────────────┘
                              │                      │
                              ▼                      ▼
                     ┌─────────────────┐    ┌──────────────┐
                     │ 📨 MESSAGE      │    │ 🗄️ DATABASE   │
                     │   QUEUE         │    │   ADAPTER    │
                     │                 │    │              │
                     │ • RabbitMQ      │    │ • MySQL      │
                     │ • Kafka         │    │ • PostgreSQL │
                     │ • Redis         │    │ • MongoDB    │
                     └─────────────────┘    └──────────────┘

🏗️ DOMAIN MODELING
╔═══════════════════════════════════════════════════════════════════╗
║                          💎 DOMAIN LAYER                          ║
╠═══════════════════════════════════════════════════════════════════╣
║                                                                   ║
║  🏛️ ENTITIES                    📦 VALUE OBJECTS                   ║
║  ┌─────────────────┐            ┌─────────────────┐               ║
║  │ User            │            │ Email           │               ║
║  │ ├─ UserId       │            │ ├─ validate()   │               ║
║  │ ├─ Email        │            │ └─ toString()   │               ║
║  │ ├─ register()   │            └─────────────────┘               ║
║  │ └─ activate()   │                                              ║
║  └─────────────────┘            ┌─────────────────┐               ║
║                                 │ Money           │               ║
║  ┌─────────────────┐            │ ├─ amount       │               ║
║  │ Order           │            │ ├─ currency     │               ║
║  │ ├─ OrderId      │            │ ├─ add()        │               ║
║  │ ├─ Items        │            │ └─ multiply()   │               ║
║  │ ├─ Total        │            └─────────────────┘               ║
║  │ ├─ create()     │                                              ║
║  │ └─ calculate()  │            ┌─────────────────┐               ║
║  └─────────────────┘            │ UserId          │               ║
║                                 │ ├─ value        │               ║
║  📝 NAMED CONSTRUCTORS          │ ├─ generate()   │               ║
║  • User::fromEmail()            │ └─ equals()     │               ║
║  • Money::fromCents()           └─────────────────┘               ║
║  • Order::createEmpty()                                           ║
║  • Email::fromString()          🎯 DOMAIN SERVICES                ║
║                                 ┌─────────────────┐               ║
║                                 │ PriceCalculator │               ║
║                                 │ ├─ calculate()  │               ║
║                                 │ └─ applyTax()   │               ║
║                                 └─────────────────┘               ║
║                                                                   ║
╚═══════════════════════════════════════════════════════════════════╝

⚔️ APPLICATION vs DOMAIN SERVICES
┌─────────────────────────────────┬─────────────────────────────────┐
│        ⚙️ APPLICATION           │         💎 DOMAIN                │
│          SERVICES               │         SERVICES                │
├─────────────────────────────────┼─────────────────────────────────┤
│                                 │                                 │
│ 🎯 PURPOSE:                     │ 🎯 PURPOSE:                      │
│ • Orchestrate use cases         │ • Business logic across         │
│ • Coordinate workflows          │   multiple entities             │
│ • Handle transactions           │ • Domain calculations           │
│ • Transform data                │ • Complex business rules        │
│                                 │                                 │
│ 📝 CHARACTERISTICS:             │ 📝 CHARACTERISTICS:              │
│ • Stateless                     │ • Stateless                     │
│ • Thin layer                    │ • Pure domain logic             │
│ • No business logic             │ • No infrastructure deps        │
│ • Coordinates multiple domains  │ • Works with domain objects     │
│                                 │                                 │
│ 💡 EXAMPLES:                    │ 💡 EXAMPLES:                     │
│ • RegisterUserUseCase           │ • PriceCalculationService       │
│ • ProcessOrderUseCase           │ • InventoryDomainService        │
│ • SendEmailNotification         │ • UserValidationService         │
│ • PublishDomainEvent            │ • OrderDiscountService          │
│                                 │                                 │
└─────────────────────────────────┴─────────────────────────────────┘

📡 DOMAIN EVENTS FLOW

'''
🎯 BUSINESS EVENT OCCURS
         │
         ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│ 💎 DOMAIN       │───▶│ 📤 EVENT         │───▶│ 📨 EVENT        │
│   ENTITY        │    │   DISPATCHER    │    │   HANDLER       │
│                 │    │                 │    │                 │
│ • User created  │    │ • Collects      │    │ • Process       │
│ • Order placed  │    │ • Dispatches    │    │ • Send email    │
│ • Payment made  │    │ • Routes        │    │ • Update view   │
└─────────────────┘    └─────────────────┘    └─────────────────┘
                                │                      │
                                ▼                      ▼
                       ┌─────────────────┐    ┌─────────────────┐
                       │ 🚀 MESSAGE      │    │ 🔔 EXTERNAL      │
                       │   QUEUE         │    │   SYSTEMS       │
                       │                 │    │                 │
                       │ • RabbitMQ      │    │ • Email Service │
                       │   Exchange      │    │ • Analytics     │
                       │ • Topic/Queue   │    │ • 3rd Party API │
                       │ • Routing Key   │    │ • Notifications │
                       └─────────────────┘    └─────────────────┘

📋 EVENT PUBLISHING ALTERNATIVES:
┌────────────────────────────────────────────────────────────────────┐
│ 1. 🔄 SYNCHRONOUS:   Direct method calls (same transaction)         │
│ 2. 🔄 ASYNCHRONOUS:  Message queues (eventual consistency)          │
│ 3. 🔄 HYBRID:        Outbox pattern (transactional + async)         │
└────────────────────────────────────────────────────────────────────┘
'''

🧪 TESTING STRATEGY
┌═══════════════════════════════════════════════════════════════════┐
║                         🧪 TESTING PYRAMID                        ║
╠═══════════════════════════════════════════════════════════════════╣
║                                                                   ║
║                      🎭 ACCEPTANCE TESTS                          ║
║               ┌─────────────────────────────────────┐             ║
║               │         END-TO-END SCOPE            │             ║
║               │ • Complete user journeys            │             ║
║               │ • API endpoint testing              │             ║
║               │ • Business scenario validation      │             ║
║               │ • System behavior verification      │             ║
║               └─────────────────────────────────────┘             ║
║                                                                   ║
║               🔗 INTEGRATION TESTS                                ║
║        ┌─────────────────────────────────────────────────┐        ║
║        │            INFRASTRUCTURE SCOPE                 │        ║
║        │ • Database repositories                         │        ║
║        │ • External API adapters                         │        ║
║        │ • Message queue publishers                      │        ║
║        │ • File system operations                        │        ║
║        │ • Real infrastructure components                │        ║
║        └─────────────────────────────────────────────────┘        ║
║                                                                   ║
║ ⚡ UNIT TESTS                                                     ║
║ ┌─────────────────────────────────────────────────────────────┐   ║
║ │              DOMAIN + APPLICATION SCOPE                     │   ║
║ │ • Business logic validation                                 │   ║
║ │ • Value object behavior                                     │   ║
║ │ • Entity invariants                                         │   ║
║ │ • Domain service algorithms                                 │   ║
║ │ • Use case orchestration                                    │   ║
║ │ • Command/Query handlers                                    │   ║
║ │ • Domain event publishing                                   │   ║
║ └─────────────────────────────────────────────────────────────┘   ║
║                                                                   ║
╚═══════════════════════════════════════════════════════════════════╝

🎯 TESTING SCOPE BY LAYER:
┌──────────────────┬─────────────────┬─────────────────┬─────────────────┐
│      LAYER       │   UNIT TESTS    │ INTEGRATION     │   ACCEPTANCE    │
├──────────────────┼─────────────────┼─────────────────┼─────────────────┤
│ 💎 Domain        │        ✅        │        ❌        │       ✅        │
│ ⚙️ Application   │        ✅        │        ❌        │       ✅        │
│ 🔧 Infrastructure│        ❌         │        ✅       │       ✅        │
└──────────────────┴─────────────────┴─────────────────┴─────────────────┘
```

## ✨ KEY BENEFITS

```
╔════════════════════════════════════════════════════════════════════════╗
║                        🌟 ARCHITECTURE BENEFITS                         ║
╠════════════════════════════════════════════════════════════════════════╣
║                                                                        ║
║  🔄 FLEXIBILITY            🧪 TESTABILITY           🏗️ MAINTAINABILITY  ║
║  ┌─────────────────┐      ┌─────────────────┐      ┌─────────────────┐ ║
║  │ • Easy swapping │      │ • Isolated      │      │ • Clear         │ ║
║  │   of adapters   │      │   business      │      │   separation    │ ║
║  │ • Database      │      │   logic         │      │ • Reduced       │ ║
║  │   agnostic      │      │ • Mockable      │      │   coupling      │ ║
║  │ • Framework     │      │   dependencies  │      │ • Single        │ ║
║  │   independent   │      │ • Fast unit     │      │   responsibility│ ║
║  │ • Technology    │      │   tests         │      │ • Easier        │ ║
║  │   neutral       │      │ • TDD friendly  │      │   refactoring   │ ║
║  └─────────────────┘      └─────────────────┘      └─────────────────┘ ║
║                                                                        ║
╚════════════════════════════════════════════════════════════════════════╝
```

## 📐 DEPENDENCY RULE

```
🚫 DEPENDENCY DIRECTION RULES:

    ┌─────────────────┐
    │ 🔧 INFRASTRUCTURE│ ──┐
    └─────────────────┘   │
              │           │ ❌ CANNOT DEPEND
              │           │    ON OUTER LAYERS
              ▼           │
    ┌─────────────────┐   │
    │ ⚙️ APPLICATION   │ ──┘
    └─────────────────┘
              │
              ▼
    ┌─────────────────┐
    │ 💎 DOMAIN       │ ◄── 🎯 NO DEPENDENCIES
    └─────────────────┘      (PURE BUSINESS LOGIC)

✅ ALLOWED:  Infrastructure → Application → Domain
❌ FORBIDDEN: Domain → Application → Infrastructure
```

## ✅ IMPLEMENTATION CHECKLIST

```
📋 STEP-BY-STEP IMPLEMENTATION GUIDE:

🏗️ STRUCTURE SETUP:
    ☐ Create layer directories
    ☐ Define domain entities
    ☐ Create value objects  
    ☐ Setup repository interfaces
    ☐ Define domain events

⚙️ APPLICATION LAYER:
    ☐ Define use cases
    ☐ Create application services
    ☐ Setup command/query handlers
    ☐ Implement event publishing
    ☐ Add transaction management

🔧 INFRASTRUCTURE:
    ☐ Implement repositories
    ☐ Setup database adapters
    ☐ Configure dependency injection
    ☐ Add external service adapters
    ☐ Setup message queue adapters

🧪 TESTING:
    ☐ Write domain unit tests
    ☐ Add application unit tests
    ☐ Create integration tests
    ☐ Setup acceptance tests
    ☐ Configure test doubles/mocks

📡 CONTROLLERS:
    ☐ Create HTTP controllers
    ☐ Add request/response DTOs
    ☐ Implement error handling
    ☐ Add input validation
    ☐ Setup routing
```

## 🎯 QUICK REFERENCE

```
┌──────────────────────────────────────────────────────────────────┐
│                        🔍 QUICK PATTERNS                         │
├──────────────────────────────────────────────────────────────────┤
│                                                                  │
│ 💎 DOMAIN PATTERNS:                                              │
│ • Entity: Has identity, mutable state                            │
│ • Value Object: No identity, immutable                           │
│ • Aggregate: Consistency boundary                                │
│ • Domain Service: Cross-entity business logic                    │
│ • Repository: Data access abstraction                            │
│                                                                  │
│ ⚙️ APPLICATION PATTERNS:                                         │
│ • Use Case: Single business operation                            │
│ • Command: Modify state                                          │
│ • Query: Read data                                               │
│ • Event Handler: React to domain events                          │
│                                                                  │
│ 🔧 INFRASTRUCTURE PATTERNS:                                      │
│ • Adapter: Implement port interfaces                             │
│ • Factory: Create complex objects                                │
│ • Builder: Construct objects step by step                        │
│ • Strategy: Algorithm selection                                  │
│                                                                  │
└──────────────────────────────────────────────────────────────────┘
```
